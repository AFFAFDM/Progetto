package util;

import java.util.HashMap;
import java.util.Collection;

/**
 * A generator of sets of elements, implemented through a bitset of
 * <tt>long</tt>s. The stes generated by this generator share the same
 * global set of elements which can be put inside them.
 *
 * @author <A HREF="mailto:fausto.spoto@univr.it">Fausto Spoto</A>
 */

public class BitSetFactory<E> {

    /**
     * A map from the elements to their bit position.
     */

    private final HashMap<E,Integer> elements = new HashMap<E,Integer>();

    /**
     * A map from the bit positions to the element that they represent.
     */

    private final HashMap<Integer,E> indexed = new HashMap<Integer,E>();

    /**
     * An empty bitset for this factory.
     */

    private final BitSet<E> empty = createEmptySet();

    /**
     * The next position available for new elements.
     */

    private int next = 0;

    /**
     * Builds an empty bitset belonging to this factory.
     *
     * @return the empty set
     */

    public BitSet<E> createEmptySet() {
	return new BitSet<E>(this);
    }

    /**
     * Yields an empty bitset belonging to this factory.
     *
     * @return an empty bitset belonging to this factory
     */

    protected BitSet<E> getEmptySet() {
	return empty;
    }

    /**
     * Builds a bitset belonging to this factory and containing the given
     * set of elements.
     *
     * @return the bitset containing exactly the elements in <tt>set</tt>
     */

    public BitSet<E> createSet(Collection<E> set) {
	return new BitSet<E>(this,set);
    }

    /**
     * Yields the successive number of the given element among those that
     * are contained by this factory.
     *
     * @param e the element
     * @return the successive number of <tt>e</tt>. Yields <tt>-1</tt> if
     *         <tt>e</tt> does not belong to this factory
     */

    int indexOf(E e) {
	Integer result = elements.get(e);
	if (result == null) return -1;
	else return result.intValue();
    }

    /**
     * Adds the given element to this factory. It was never added before.
     *
     * @param e the element to add
     */

    void add(E e) {
	Integer order = new Integer(next++);
	elements.put(e,order);
	indexed.put(order,e);
    }

    /**
     * Yields the element of this factory at the given position.
     *
     * @param pos the position
     * @return the element represented by the <tt>pos</tt>th bit of the bitsets
     *         generated by this factory
     */

    E get(int pos) {
	return indexed.get(pos);
    }

    /**
     * Yields the number of elements in the bitsets created with this factory.
     *
     * @return the number of elements in the bitsets created with this factory
     */

    public int size() {
	return next;
    }
}